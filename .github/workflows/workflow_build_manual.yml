
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows

name: Manual Workflow to build OS-specific binaries

on:
  workflow_call:
    inputs:
      btu_version:
        description: "BTU Semantic Version."
        required: true
        type: string
      operating_system:
        description: "Target OS"
        required: true
        type: string
      tag:
        description: "Tag of the release"
        required: true
        type: string

jobs:
  build_some_linux:
    name: Build binaries for a Linux operating system
    runs-on: ${{ inputs.operating_system }}
    steps:
      - name: Show GLIBC
        run: ldd --version

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set environment variables
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "BTU_VERSION=${{ github.event.inputs.btu_version }}" >> $GITHUB_ENV
          echo "INPUT_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo_deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb

      - name: Build Rust Binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: Create Debian Package
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: -p btu_scheduler

      - name: Prepare btu-daemon archive
        run: |
          strip target/release/btu-daemon
          export ARCHIVE_NAME_DAEMON=btu-daemon-${{ env.INPUT_TAG }}-linux-x64.tar.gz
          echo "ARCHIVE_NAME_DAEMON=$ARCHIVE_NAME_DAEMON" >> $GITHUB_ENV
          tar -czvf $ARCHIVE_NAME_DAEMON -C target/release btu-daemon

      - name: Prepare btu-cli archive
        run: |
          strip target/release/btu
          export ARCHIVE_NAME_CLI=btu-${{ env.INPUT_TAG }}-linux-x64.tar.gz
          echo "ARCHIVE_NAME_CLI=$ARCHIVE_NAME_CLI" >> $GITHUB_ENV
          tar -czvf $ARCHIVE_NAME_CLI -C target/release btu

      - name: Prepare Debian archive
        run: |
          export ARCHIVE_NAME_DEB=target/debian/btu_scheduler_${{ env.BTU_VERSION }}_amd64.deb
          echo "ARCHIVE_NAME_DEB=$ARCHIVE_NAME_DEB" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.INPUT_TAG }}
          release_name: ${{ env.INPUT_TAG }}
          body: HQ ${{ env.INPUT_TAG }}
          draft: false
          # prerelease: true

      - name: Upload Scheduler daemon binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME_DAEMON }}
          asset_name: ${{ env.ARCHIVE_NAME_DAEMON }}
          asset_content_type: application/tar+gzip

      - name: Upload CLI binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME_CLI }}
          asset_name: ${{ env.ARCHIVE_NAME_CLI }}
          asset_content_type: application/tar+gzip

      - name: Upload Debian Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME_DEB }}
          asset_name: ${{ env.ARCHIVE_NAME_DEB }}
          asset_content_type: application/unknown
